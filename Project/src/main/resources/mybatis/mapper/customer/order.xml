<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="order">
    <!-- 전체 주문내역 조회 -->
    <select id="select_all" resultType="user.vo.customer.OrderVO" parameterType="String">
        SELECT DISTINCT s.name AS brand, p.prod_code AS prod_code, p.name AS prod_name, p.price AS prod_price, p.sale AS prod_sale,
        p.prod_image AS prod_image, p.saled_price AS prod_saled_price, i.option_name AS option_name, o.*
        FROM `order` o
        INNER JOIN product p ON o.prod_no = p.id
        INNER JOIN seller s ON p.seller_no = s.id
        LEFT JOIN inventory i ON i.id = o.inventory_no
        WHERE o.cus_no = #{cus_no}
        ORDER BY o.order_date DESC
    </select>

    <!-- 날짜 별 주문내역 조회 -->
    <select id="select_date" resultType="user.vo.customer.OrderVO" parameterType="map">
        SELECT DISTINCT s.name AS brand, p.prod_code AS prod_code, p.name AS prod_name, p.price AS prod_price, p.sale AS prod_sale,
        p.prod_image AS prod_image, p.saled_price AS prod_saled_price, i.option_name AS option_name, o.*
        FROM `order` o
        INNER JOIN product p ON o.prod_no = p.id
        INNER JOIN seller s ON p.seller_no = s.id
        LEFT JOIN inventory i ON i.id = o.inventory_no
        WHERE o.cus_no = #{cus_no}
        <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
            AND o.order_date BETWEEN #{startDate} AND #{endDate}
        </if>
        ORDER BY o.order_date DESC
    </select>

    <!-- 주문코드를 기반으로 주문, 배송, 결제 정보를 조회(list) -->
    <select id="select_order_code" resultType="user.vo.customer.OrderVO" parameterType="map">
        SELECT o.*, s.name AS brand, d.name AS deli_name, d.pos_code, d.addr1, d.addr2, d.phone, d.request AS deli_request, d.is_default AS is_default, p.prod_code AS prod_code,
        p.name AS prod_name, p.price AS prod_price, p.sale AS prod_sale, p.prod_image AS prod_image, p.saled_price AS prod_saled_price, i.option_name AS option_name
        FROM `order` o
        INNER JOIN product p ON o.prod_no = p.id
        INNER JOIN delivery d ON o.deli_no = d.id
        INNER JOIN seller s ON p.seller_no = s.id
        LEFT JOIN inventory i ON i.id = o.inventory_no
        WHERE o.order_code = #{order_code} AND o.cus_no = #{cus_no}
    </select>

    <!-- 취소/반품/교환 할 상품 가져오기 -->
    <select id="select_order_product" resultType="user.vo.customer.OrderVO" parameterType="map">
        SELECT o.*, s.name AS brand, d.name AS deli_name, d.pos_code, d.addr1, d.addr2, d.phone, d.request AS deli_request, d.is_default AS is_default, p.prod_code AS prod_code,
        p.name AS prod_name, p.price AS prod_price, p.sale AS prod_sale, p.prod_image AS prod_image, p.saled_price AS prod_saled_price, i.option_name AS option_name
        FROM `order` o
        INNER JOIN product p ON o.prod_no = p.id
        INNER JOIN delivery d ON o.deli_no = d.id
        INNER JOIN seller s ON p.seller_no = s.id
        LEFT JOIN inventory i ON i.id = o.inventory_no
        WHERE o.id = #{id} AND o.order_code = #{order_code} AND o.cus_no = #{cus_no}
    </select>

    <!-- 취소/반품/교환 상품 전체 조회 -->
    <select id="select_refund_all" resultType="user.vo.customer.OrderVO" parameterType="String">
        SELECT DISTINCT s.name AS brand, p.prod_code AS prod_code, p.name AS prod_name, p.price AS prod_price, p.sale AS prod_sale,
        p.prod_image AS prod_image, p.saled_price AS prod_saled_price, i.option_name AS option_name, o.*
        FROM `order` o
        INNER JOIN product p ON o.prod_no = p.id
        INNER JOIN seller s ON p.seller_no = s.id
        LEFT JOIN inventory i ON i.id = o.inventory_no
        WHERE o.cus_no = #{cus_no} AND o.status IN (6, 7, 8)
        ORDER BY o.order_date DESC;
    </select>

    <!-- 취소/반품 상품 전체 조회 -->
    <select id="select_refund_cancelRefund" resultType="user.vo.customer.OrderVO" parameterType="String">
        SELECT DISTINCT s.name AS brand, p.prod_code AS prod_code, p.name AS prod_name, p.price AS prod_price, p.sale AS prod_sale,
        p.prod_image AS prod_image, p.saled_price AS prod_saled_price, i.option_name AS option_name, o.*
        FROM `order` o
        INNER JOIN product p ON o.prod_no = p.id
        INNER JOIN seller s ON p.seller_no = s.id
        LEFT JOIN inventory i ON i.id = o.inventory_no
        WHERE o.cus_no = #{cus_no} AND o.status IN (6, 7)
        ORDER BY o.order_date DESC;
    </select>

    <!-- 교환 상품 전체 조회 -->
    <select id="select_refund_exchange" resultType="user.vo.customer.OrderVO" parameterType="String">
        SELECT DISTINCT s.name AS brand, p.prod_code AS prod_code, p.name AS prod_name, p.price AS prod_price, p.sale AS prod_sale,
        p.prod_image AS prod_image, p.saled_price AS prod_saled_price, i.option_name AS option_name, o.*
        FROM `order` o
        INNER JOIN product p ON o.prod_no = p.id
        INNER JOIN seller s ON p.seller_no = s.id
        LEFT JOIN inventory i ON i.id = o.inventory_no
        WHERE o.cus_no = #{cus_no} AND o.status = 8
        ORDER BY o.order_date DESC;
    </select>

    <!-- 주문코드 별 금액 총 합 -->
    <select id="select_total_amount" resultType="int" parameterType="map">
        SELECT SUM(amount) FROM `order`
        WHERE order_code = #{order_code} AND cus_no = #{cus_no}
    </select>

    <!-- 주문코드 별 원가 금액 총 합 -->
    <select id="select_total_price" resultType="int" parameterType="map">
        SELECT SUM(re) AS total_re
        FROM (
        SELECT (p.price * o.count) AS re
        FROM `order` o
        INNER JOIN product p ON o.prod_no = p.id
        WHERE order_code = #{order_code} AND cus_no = #{cus_no}
        GROUP BY p.price, o.count
        ) subquery
    </select>

    <!-- 주문 상세 조회(배송지 변경 로그 입력 시 사용) -->
    <select id="select_order_details" resultType="user.vo.customer.OrderVO" parameterType="map">
        SELECT DISTINCT cus_no, order_code, deli_no FROM `order`
        WHERE cus_no = #{cus_no} AND order_code = #{order_code}
    </select>

    <!-- 주문 배송지 변경 update -->
    <update id="update_order_delivery" parameterType="map">
        UPDATE `order`
        SET deli_no = #{deli_no}
        WHERE order_code = #{order_code}
        AND cus_no = #{cus_no}
    </update>

    <!-- 취소 요청 -->
    <update id="update_order_cancel" parameterType="map">
        UPDATE `order`
        SET status = 6, refund_bank = #{refund_bank}, refund_account = #{refund_account}, reason = #{reason}
        WHERE id = #{id} AND cus_no = #{cus_no} AND order_code = #{order_code}
        AND prod_no = #{prod_no}
    </update>

    <!-- 배송 전 상품 사이즈 변경 -->
    <update id="update_order_size" parameterType="map">
        UPDATE `order`
        SET inventory_no = #{inventory_no}
        WHERE id = #{id} AND cus_no = #{cus_no} AND order_code = #{order_code}
        AND prod_no = #{prod_no}
    </update>

    <!-- 반품 요청 -->
    <update id="update_order_refund" parameterType="map">
        UPDATE `order`
        SET status = 7, refund_bank = #{refund_bank}, refund_account = #{refund_account},
        reason = #{reason}, retrieve_deli_no = #{retrieve_deli_no}
        WHERE id = #{id} AND cus_no = #{cus_no} AND order_code = #{order_code}
        AND prod_no = #{prod_no}
    </update>

    <!-- 교환 요청 -->
    <update id="update_order_exchange" parameterType="map">
        UPDATE `order`
        SET status = 8, reason = #{reason}, retrieve_deli_no = #{retrieve_deli_no}, inventory_no = #{inventory_no}
        WHERE id = #{id} AND cus_no = #{cus_no} AND order_code = #{order_code}
        AND prod_no = #{prod_no}
    </update>

    <!-- 주문 시 사용한 쿠폰 내용 가져오기(orderDetails) -->
    <select id="select_order_coupon_list" resultType="user.vo.customer.OrderVO" parameterType="map">
        SELECT DISTINCT c.name AS coupon_name, c.sale_per AS sale_per
        FROM `order` o
        INNER JOIN coupon c ON o.coupon_no = c.id
        INNER JOIN cus_coupon cc ON cc.coupon_no = c.id
        WHERE o.cus_no = #{cus_no} AND o.order_code = #{order_code} AND cc.status = '2'
    </select>

    <!-- 주문 시 사용한 쿠폰 내용 가져오기(취소/환불) -->
    <select id="select_order_coupon" resultType="user.vo.customer.OrderVO" parameterType="map">
        SELECT DISTINCT c.name AS coupon_name, c.sale_per AS sale_per
        FROM `order` o
        INNER JOIN coupon c ON o.coupon_no = c.id
        INNER JOIN cus_coupon cc ON cc.coupon_no = c.id
        WHERE o.cus_no = #{cus_no} AND o.order_code = #{order_code} AND cc.status = '2' AND o.prod_no = #{prod_no}
    </select>

    <!-- 주문 추가 -->
    <insert id="insert_order" parameterType="user.vo.customer.OrderVO">
        INSERT INTO `order` (tid, cus_no, prod_no, coupon_no, deli_no, order_code, count, amount, expected_point, order_date, inventory_no, pay_type, status)
        VALUES (#{tid}, #{cus_no}, #{prod_no}, #{coupon_no}, #{deli_no}, #{order_code}, #{count}, #{amount}, #{expected_point}, CURRENT_TIMESTAMP(), #{inventory_no}, 3, 1)
    </insert>

    <!-- 구매확정 주문 내역만 가져오기 -->
    <select id="select_purchase_confirm" resultType="user.vo.customer.OrderVO">
        SELECT DISTINCT s.name AS brand, p.prod_code AS prod_code, p.name AS prod_name, p.price AS prod_price, p.sale AS prod_sale,
        p.prod_image AS prod_image, p.saled_price AS prod_saled_price, i.option_name AS option_name, o.*
        FROM `order` o
        INNER JOIN product p ON o.prod_no = p.id
        INNER JOIN seller s ON p.seller_no = s.id
        LEFT JOIN inventory i ON i.id = o.inventory_no
        WHERE o.cus_no = #{cus_no} AND o.status = 5
        ORDER BY o.order_date DESC
    </select>

    <!-- 작성 할 리뷰 상품 정보 -->
    <select id="select_review_product" resultType="user.vo.customer.OrderVO" parameterType="map">
        SELECT s.name AS brand, p.prod_code AS prod_code, p.name AS prod_name, p.price AS prod_price, p.sale AS prod_sale,
        p.prod_image AS prod_image, p.saled_price AS prod_saled_price, i.option_name AS option_name, o.*
        FROM `order` o
        INNER JOIN product p ON o.prod_no = p.id
        INNER JOIN seller s ON p.seller_no = s.id
        LEFT JOIN inventory i ON i.id = o.inventory_no
        WHERE o.cus_no = #{cus_no} AND o.prod_no = #{prod_no} AND o.order_code = #{order_code} AND o.status = 5
    </select>

    <!-- 취소/반품/교환상품 상세 조회 -->
    <select id="select_details_by_status" resultType="user.vo.customer.OrderVO" parameterType="map">
        SELECT s.name AS brand, p.prod_code AS prod_code, p.name AS prod_name, p.price AS prod_price, p.sale AS prod_sale,
        p.prod_image AS prod_image, p.saled_price AS prod_saled_price, i.option_name AS option_name, o.*
        FROM `order` o
        INNER JOIN product p ON o.prod_no = p.id
        INNER JOIN seller s ON p.seller_no = s.id
        LEFT JOIN inventory i ON i.id = o.inventory_no
        WHERE o.cus_no = #{cus_no} AND o.prod_no = #{prod_no} AND o.order_code = #{order_code} AND o.status = #{status}
    </select>
</mapper>